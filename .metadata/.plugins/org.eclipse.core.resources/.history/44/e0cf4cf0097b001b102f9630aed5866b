package ftps;

import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.net.SocketException;

import org.apache.commons.net.ftp.FTPClient;
import org.apache.commons.net.ftp.FTPFile;
import org.apache.commons.net.ftp.FTPSClient;

public class main {
	
	private static void downloadFolder(
		    FTPClient ftpClient, String remotePath, String localPath) throws IOException
		{
		    System.out.println("Downloading folder " + remotePath + " to " + localPath);

		    FTPFile[] remoteFiles = ftpClient.listFiles(remotePath);

		    for (FTPFile remoteFile : remoteFiles)
		    {
		        if (!remoteFile.getName().equals(".") && !remoteFile.getName().equals(".."))
		        {
		            String remoteFilePath = remotePath + "/" + remoteFile.getName();
		            String localFilePath = localPath + "/" + remoteFile.getName();

		            if (remoteFile.isDirectory())
		            {
		                new File(localFilePath).mkdirs();

		                downloadFolder(ftpClient, remoteFilePath, localFilePath);
		            }
		            else
		            {
		            	System.out.println("Downloading file " + remoteFilePath + " to " +
		                        localFilePath);

		                    OutputStream outputStream =
		                        new BufferedOutputStream(new FileOutputStream(localFilePath));
		                    if (!ftpClient.retrieveFile(remoteFilePath, outputStream))
		                    {
		                        System.out.println("Failed to download file " + remoteFilePath);
		                    }
		                outputStream.close();
		            }
		        }
		    }
		}	
	
	public static void downloadfile(FTPSClient ftpClient) {
        ftpClient.connect(server, port);
        ftpClient.login(user, pass);
        ftpClient.enterLocalPassiveMode();
        ftpClient.setFileType(FTP.BINARY_FILE_TYPE);

        // APPROACH #1: using retrieveFile(String, OutputStream)
        String remoteFile1 = "/test/video.mp4";
        File downloadFile1 = new File("D:/Downloads/video.mp4");
        OutputStream outputStream1 = new BufferedOutputStream(new FileOutputStream(downloadFile1));
        boolean success = ftpClient.retrieveFile(remoteFile1, outputStream1);
        outputStream1.close();
	}
	
	public static void main(String[] args) {
		// TODO Auto-generated method stub

		String downloadtarget = "C:/opt/FileZillaServer/shardfolder/client1/test";
		String downloadpath = "D:/temp";
		
		
		FTPSClient ftpClient = new FTPSClient();
		try {
			ftpClient.connect("10.253.46.177");
			ftpClient.login("client1", "c1234567890");
			System.out.println("connect");
		
			downloadfile(ftpClient);
//			downloadFolder(ftpClient, downloadtarget, downloadpath);
			
		
			ftpClient.logout();
		} catch (SocketException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

}
